// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id                      String          @id @default(cuid())
  name                    String?
  email                   String?         @unique
  avatar                  String?
  password                String?
  role                    UserRole        @default(USER)
  isVarifyed              Boolean         @default(false)
  verificationToken       String?         @unique
  verificationTokenExpiry DateTime?
  resetToken              String?         @unique
  resetTokenExpiry        DateTime?
  refreshToken            String?
  accessToken             String?
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  Problem                 Problem[]
  Submission              Submission[]
  ProblemSolved           ProblemSolved[]
  Playlist                Playlist[]
}

model Problem {
  id          String     @id @default(uuid())
  title       String
  description String
  difficulty  Difficulty
  tags        String[]
  userId      String
  examples    Json
  constraints String
  hints       String?
  editorial   String?

  testcases          Json
  codeSnippets       Json
  referenceSolutions Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  Submission        Submission[]
  ProblemSolved     ProblemSolved[]
  ProblemInPlaylist ProblemInPlaylist[]
}

model Submission {
  id            String  @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?
  // TestCaseResult 

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem        Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
  TestCaseResult TestCaseResult[]
}

model TestCaseResult {
  id            String   @id @unique @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?
  createAt      DateTime @default(now())
  updatedAt     DateTime @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String @id @default(uuid())
  userId    String
  problemId String

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Playlist {
  id          String   @id @default(uuid())
  name        String
  description String?
  userId      String
  createAt    DateTime @default(now())
  updatedAt   DateTime @updatedAt

  problems ProblemInPlaylist[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
}

model ProblemInPlaylist {
  id         String @id @default(uuid())
  playlistId String
  problemId  String

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  Playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playlistId, problemId])
}
